/*=========================================================================
 
 Program:   Small Computings for Clinicals Project
 Module:    $HeadURL: $
 Date:      $Date: $
 Version:   $Revision: $
 URL:       http://scc.pj.aist.go.jp
 
 (c) 2013- Kiyoyuki Chinzei, Ph.D., AIST Japan, All rights reserved.
 
 Acknowledgement: This work is/was supported by many research fundings.
 See Acknowledgement.txt
 
 This software is distributed WITHOUT ANY WARRANTY; without even
 the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 PURPOSE.  See License.txt for license terms.
 
 =========================================================================*/

#include "ChromaWindow.h"
#include <QDialogButtonBox>
#include <QAbstractButton>
#include <QtDebug>

ChromaWindow::ChromaWindow(QWidget* parent)
    : QDialog (parent)
{
    // Set up the UI generated by Designer.
    setupUi(this);
}


ChromaWindow::~ChromaWindow()
{

}

void ChromaWindow::reject()
{
	emit reqRejectChromaWindow();
}

void ChromaWindow::on_buttonBox_rejected(void)
{
	emit reqRejectChromaWindow();
}

void ChromaWindow::on_buttonBox_clicked(QAbstractButton* button)
{
	if (buttonBox->buttonRole(button) == QDialogButtonBox::AcceptRole) {
		emit reqAcceptChroma();
	} else {
        emit reqRevertChroma();
    }
}

void ChromaWindow::onUpdateChromaImage(CIImage *img)
{
    // widget->updateImage(img);
}

void ChromaWindow::onUpdateChroma(float hueMin, float hueMax, float valMin, float valMax)
{
    slider_hmin->setValue(hueMin);
	slider_hmax->setValue(hueMax);
    slider_vmin->setValue(valMin);
    slider_vmax->setValue(valMax);
    
    mHueMin = hueMin;
    mHueMax = hueMax;
    mValMin = valMin;
    mValMax = valMax;
}

void ChromaWindow::onUpdateValues(void)
{
    int hueMin = slider_hmin->value();
	int hueMax = slider_hmax->value();
    int valMin = slider_vmin->value();
	int valMax = slider_vmax->value();

    if (hueMin != mHueMin) {
        if (hueMin > mHueMax) {
            hueMin = mHueMax;
            slider_hmin->setValue(hueMin);
        }
    } else if (hueMax != mHueMax) {
        if (hueMax < mHueMin) {
            hueMax = mHueMin;
            slider_hmax->setValue(hueMax);
        }        
    } else if (valMin != mValMin) {
        if (valMin > mValMax) {
            valMin = mValMax;
            slider_vmin->setValue(valMin);
        }
    } else if (valMax != mValMax) {
        if (valMax < mValMin) {
            valMax = mValMin;
            slider_vmax->setValue(valMax);
        }
    }
    
    mHueMin = hueMin;
    mHueMax = hueMax;
    mValMin = valMin;
    mValMax = valMax;
    
    emit reqUpdateChroma(mHueMin, mHueMax, mValMin, mValMax);
}